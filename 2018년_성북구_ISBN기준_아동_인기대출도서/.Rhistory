nums <- 1:10
print(nums)
nums <- 1:100
print(nums)
nums <- 100:1
print(nums)
nums[1]
nums[100]
nums[-100]
nums2 = nums + 1000
print(nums2)
q()
ls()
nums
q()
plot(1:10)
help(plot)
?
?c
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr$open()
remDr$navigate('https://www.istarbucks.co.kr/store/store_map.do?disp=locale')
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr
remDr$open()
library(httr)
remDr$open()
library(rvest)
remDr$open()
remDr$navigate('https://www.istarbucks.co.kr/store/store_map.do?disp=locale')
remDr$open()
remDr$navigate("http://www.google.com/ncr")
remDr$open()
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr$open()
library(XML)
library(httr)
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445,
browserName = "chrome")
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr$open()
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr$open()
library(RSelenium)
library(httr)
mDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "localhost" , port = 4445, browserName = "chrome")
remDr$open()
remDr$navigate('https://www.istarbucks.co.kr/store/store_map.do?disp=locale')
l_Click = remDr$findElement(using = 'css', '#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step1 > div.loca_step1_cont > ul > li:nth-child(1) > a')
Seoul_Click$clickElement()
Seoul_Click = remDr$findElement(using = 'css', '#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step1 > div.loca_step1_cont > ul > li:nth-child(1) > a')
Seoul_Click$clickElement()
Whole_Click = remDr$findElement(using = 'css', '#mCSB_2_container > ul > li:nth-child(1) > a')
Whole_Click$clickElement()
unt = remDr$findElements('css selector','#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step3 > div.result_num_wrap > span')
x = sapply(count, function(x){x$getElementText()})
count = remDr$findElements('css selector','#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step3 > div.result_num_wrap > span')
x = sapply(count, function(x){x$getElementText()})
x = sapply(count, function(x){x$getElementText()})
x
x = as.numeric(x)
x
shop = NULL
addr = NULL
phone = NULL
y1 = NULL
y2 = NULL
y3 = NULL
for(i in 1:x){
# 매장명
shopname = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,') > strong'))
y1 = sapply(shopname, function(x){x$getElementText()})
shop = c(shop,y1)
# 주소
addrname = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,')> p'))
y2 = sapply(addrname, function(x){x$getElementText()})
addr = c(addr,y2)
#전화번호
telephone = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,') > p > br'))
y3 = sapply(telephone, function(x){x$getElementText()})
phone = c(phone,y3)
if(i%%3==0){
remDr$executeScript(
"var su=arguments[0]; var dom=document.querySelectorAll(
'#mCSB_3_container > ul > li')[su]; dom.scrollIntoView();",list(i))
}
}
shop
addr
phone
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
str(addr)
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, '\n')
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, "\")
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr <- strsplit(addr, split='\n')
addr
addr
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, split='\n')
addr
ssdf
strsplit(addr, split='\n')
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, split='\')
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr <- gsub("[:cntrl:]","",addr)
addr
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr <- gsub("[\n]","",addr)
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr <- gsub("\n","",addr)
addr
addr
addr
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, '\n')
as.character(addr)
strsplit(addr, '\n')
strsplit(unlist(addr), '\n')
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr_and_phone <- strsplit(unlist(addr), '\n')
addr <- addr_and_phone[1]
addr
phone <- addr_and_phone[,2]
phone <- addr_and_phone[,2,]
unlist(addr_and_phone)
addr_and_phone <- strsplit(unlist(addr), '\n')
unlist(addr_and_phone)
addr_and_phone
addr1 <- addr_and_phone(1:503,,)
addr1 <- addr_and_phone[1:503,,]
addr1 <- addr_and_phone[1,,1:503]
addr1 <- addr_and_phone[1,1:503]
addr1 <- addr_and_phone[1:503,1]
addr_and_phone$1
addr_and_phone$[1]
addr_and_phone$'1'
addr_and_phone[,1,1]
addr_and_phone[,1]
addr_and_phone[1,1]
addr_and_phone[1,1,1]
addr_and_phone[1,1,[1]
addr_and_phone[1,1,[1]]
addr_and_phone[[1]]
addr_and_phone[[1]][1]
addr_and_phone[[1:503]][1]
addr_and_phone[1:503][1]
addr_and_phone[[1]:[503]][1]
addr_and_phone[[503]][1]
addr_and_phone[[1:503]][1]
}
for(i in 1:503){
addr_and_phone[[i]][1]
}
addr1 <- for(i in 1:503){
addr_and_phone[[i]][1]
}
addr1 <- for(i in 1:503){
print(addr_and_phone[[i]][1])
}
return <- NULL
addr1 <- NULL
for(i in 1:503){
addr1 <- addr1 + unlist(addr_and_phone[[i]][1])
}
for(i in 1:503){
addr_and_phone <- unlist(addr_and_phone[[i]][1])
addr1 <- addr1 + addr_and_phone
for(i in 1:503){
addr_and_phone <- unlist(addr_and_phone[[i]][1])
addr1 <- addr1 + addr_and_phone
}
addr_and_phone <- unlist(addr_and_phone[[i]][1])
addr_and_phone
addr_and_phone
addr_and_phone[[1,2]][1]
addr_and_phone[[1]][1]
addr_and_phone[[1],[2]][1]
addr_and_phone[[1][2]][1]
addr_and_phone[1][2][1]
addr_and_phone[[1][2]][1]
addr_and_phone[[1]&[2]][1]
addr_and_phone[[1]&&[2]][1]
addr_and_phone[[1,2]][1]
addr_and_phone[1,2][1]
addr_and_phone
addr_and_phone <- strsplit(addr_and_phone,' ')
length(addr_and_phone)
names(addr_and_phone)
addr1 <- addr_and_phone[[1]][1]
addr1
class(addr1)
addr1 <- NULL
for(i in 1:503){
addr1 <- addr + addr_and_phone[[i]][1]
}
for(i in 1:503){
addr1 <- addr1 + addr_and_phone[[i]][1]
}
addr1 <- NULL
for(i in 1:503){
addr1 <- c(addr1, addr_and_phone[[i]][1])
}
addr1
addr_and_phone
addr1
addr <- addr1
addr
addr2 <- NULL
phone1 <- NULL
phone1 <- c(phone1, addr_and_phone[[i]][2])
for(i in 1:503){
phone1 <- c(phone1, addr_and_phone[[i]][2])
}
phone1
phone <- phone1
addr_and_phone
remDr$open()
remDr$navigate('https://www.istarbucks.co.kr/store/store_map.do?disp=locale')
# 서울지역
Seoul_Click = remDr$findElement(using = 'css', '#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step1 > div.loca_step1_cont > ul > li:nth-child(1) > a')
Seoul_Click$clickElement()
# 전체클릭
Whole_Click = remDr$findElement(using = 'css', '#mCSB_2_container > ul > li:nth-child(1) > a')
Whole_Click$clickElement()
Seoul_Click = remDr$findElement(using = 'css', '#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step1 > div.loca_step1_cont > ul > li:nth-child(1) > a')
Seoul_Click$clickElement()
Whole_Click = remDr$findElement(using = 'css', '#mCSB_2_container > ul > li:nth-child(1) > a')
Whole_Click$clickElement()
phone1
table(phone1)
sum(grepl('02-3015-1100', phone1))
sum(grepl('02) 3015-1100', phone1))
remDr$open()
remDr$navigate('https://www.istarbucks.co.kr/store/store_map.do?disp=locale')
Seoul_Click = remDr$findElement(using = 'css', '#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step1 > div.loca_step1_cont > ul > li:nth-child(1) > a')
Seoul_Click$clickElement()
Whole_Click = remDr$findElement(using = 'css', '#mCSB_2_container > ul > li:nth-child(1) > a')
Whole_Click$clickElement()
count = remDr$findElements('css selector','#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step3 > div.result_num_wrap > span')
x = sapply(count, function(x){x$getElementText()})
x = as.numeric(x)
x
shop = NULL
addr = NULL
phone = NULL
y1 = NULL
y2 = NULL
y3 = NULL
for(i in 1:x){
# 매장명
shopname = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,') > strong'))
y1 = sapply(shopname, function(x){x$getElementText()})
shop = c(shop,y1)
# 주소
addrname = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,')> p'))
y2 = sapply(addrname, function(x){x$getElementText()})
addr = c(addr,y2)
# 전화번호
telephone = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,') > p > br'))
y3 = sapply(telephone, function(x){x$getElementText()})
phone = c(phone,y3)
if(i%%3==0){
remDr$executeScript(
"var su=arguments[0]; var dom=document.querySelectorAll(
'#mCSB_3_container > ul > li')[su]; dom.scrollIntoView();",list(i))
}
}
addr_and_phone <- strsplit(unlist(addr), '\n')
ddr1 <- NULL
for(i in 1:503){
addr1 <- c(addr1, addr_and_phone[[i]][1])
}
addr <- addr1
phone1 <- NULL
for(i in 1:503){
phone1 <- c(phone1, addr_and_phone[[i]][2])
}
phone <- phone1
library(leaflet)
library(dplyr)
library(ggmap)
seoul_lonlat <- geocode("seoul")
install.packages("devtools")
devtools::install_github("cardiomoon/Kormaps")
devtools::install_github("cardiomoon/Kormaps")
library(devtools)
devtools::install_github("cardiomoon/Kormaps")
library(leaflet)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("cardiomoon/Kormaps")
library(Kormaps)
install.packages("leaflet")
library(leaflet)
library(dplyr)
library(ggmap)
devtools::install_github("cardiomoon/Kormaps")
data(cars)
head(cars)
m = lm(dist~speed, data=cars)
m
summary(m)
?lm
fitted(m)[1:4]
residuals(m)[1:4]
predict(m, newdata=data.frame(speed=3))
?fitted
m[1:4]
library(MASS)
data(Boston)
head(Boston)
install.packages("mlbench")
library(mlbench)
data("BostonHousing")
data(BostonHousing)
data("BostonHousing")
data(BostonHousing)
head(BostonHousing)
m2 = lm(medv~, data=BostonHousing)
m2 = lm(medv~. , data=BostonHousing)
m2
summary(m2)
cars$speed
m3 = step(m, direction = "both")
m3 = step(m2, direction = "both")
rm(list=ls())
# 1. 학원의 경우
academy = read.csv("academy.csv", stringsAsFactors = F, header = T)
academy = academy[-1]
setwd("C:/Rstudy/MLData")
# 1. 학원의 경우
academy = read.csv("academy.csv", stringsAsFactors = F, header = T)
academy = academy[-1]
head(academy)
dist_academy = dist(academy, method="euclidean")
dist_academy
two_coord = cmdscale(dist_academy) # 2차원 그래프로 변환
plot(two_coord, type="n")
text(two_coord, as.character(1:52))
# 2. 순대국집의 경우
food = read.csv("food.csv", stringsAsFactors = F, header = T)
food = food[-1]
head(food)
food[18,]
# 옳은 방법
food.mult = t(as.matrix(food)) %*% as.matrix(food)
food.mult
dist.food = dist(food.mult)
dist.food
two_coord2 = cmdscale(dist.food)
plot(two_coord2, type="n")
text(two_coord2, rownames(food.mult))
install.packages("kernlab")
library(kernlab)
m = ksvm(Species~., data=iris)
m
head(predict(m, newdata=iris))
?ksvm
library(e1071)
tune.svm(Species~., data=iris, gamma=2^(-1:1), cost=2^(2:4))
set1 = read.csv("set1.csv", header=T, stringsAsFactors=F)
set1
library(MASS)
density = kde2d(set1$food, set1$book, n=400)
image(density, xlab="food", ylab="book")
m1 = svm(status ~ food + book + cul + cloth + travel, type="C-classification", data=set1)
m1
predict(m1, set1)
sum(set1$status != predict(m1, set1))
plot(set1)
library(kernlab)
m2 = ksvm(status~., kernel="rbfdot", data=set1)
m2
predict(m2, set1)
sum(as.numeric(predict(m2,set1)>0.5) != set1$status)
predict(m2,set1)>0.5
as.numeric(TRUE)
image(density, xlab="food", ylab="book")
tune.svm(status~., data=set1, gamma=2^(-1:1), cost=2^(2:4))
predict(m1, set1)
library(XML)
url = paste0("http://data4library.kr/api/recommandList?=authKey=",API_KEY,"&isbn13=",ISBN_number)
API_KEY = "6cbf90cf628c9007879727b2f5d6aa59a8f8a6fe77d1700476714f7ef9440ea6"
ISBN_number = "9788937848254"
ISBN_number = 9788937848254
url = paste0("http://data4library.kr/api/recommandList?=authKey=",API_KEY,"&isbn13=",ISBN_number)
doc = xmlParse(url)
top = xmlRoot(doc)
top
url
doc
class(ISBN_number)
url = paste0("http://data4library.kr/api/recommandList?authKey=",API_KEY,"&isbn13=",ISBN_number)
doc = xmlParse(url)
doc
top = xmlRoot(doc)
top
df = xmlToDataFrame(getNodeSet(doc, "bookname[1]"))
df = xmlToDataFrame(getNodeSet(doc, "//bookname"))
df = xmlToDataFrame(getNodeSet(doc, "//bookname[1"))
df = xmlToDataFrame(getNodeSet(doc, "//bookname[1]"))
df = xmlToDataFrame(getNodeSet(doc, "/bookname"))
df
df = xmlToDataFrame(getNodeSet(doc, "/bookname"))
top
df = xmlToDataFrame(getNodeSet(doc, "book/bookname"))
df
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc) ; top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList[1]")); df
API_KEY = "6cbf90cf628c9007879727b2f5d6aa59a8f8a6fe77d1700476714f7ef9440ea6"
ISBN_number = 9788937848254
url = paste0("http://data4library.kr/api/recommandList?authKey=",API_KEY,"&isbn13=",ISBN_number)
doc = xmlParse(url)
top = xmlRoot(doc)
top
df = xmlToDataFrame(getNodeSet(doc, "//book"))
df
head(df)
rec_book_name = df$bookname
View(rec_book_name)
doc
top
library(dplyr)
rec_book = df %>% select(bookname, isbn13, class_no)
View(rec_book)
rec_book = df %>% select(bookname, isbn13)
View(rec_book)
# 도서별 이용 분석
url = paste0("http://data4library.kr/api/usageAnalysisList?authKey=",API_KEY,"&isbn13=",ISBN_number)
doc = xmlParse(url)
top = xmlRoot(doc); top
df = xmlToDataFrame(getNodeSet(doc, "//book")); df
head(df)
df = xmlToDataFrame(getNodeSet(doc, "//recBooks"))
head(df)
str(df)
df = xmlToDataFrame(getNodeSet(doc, "/recBooks"))
df
df = xmlToDataFrame(getNodeSet(doc, "//recBooks"))
doc
top
df = xmlToDataFrame(getNodeSet(doc, "//recBooks/book"))
df
head(df)
rec_book = df %>% select(bookname, isbn13)
View(rec_book)
url = paste0("http://data4library.kr/api/recommandList?authKey=",API_KEY,"&isbn13=",ISBN_number)
doc = xmlParse(url)
top = xmlRoot(doc); top
df = xmlToDataFrame(getNodeSet(doc, "//book")); df
rec_book1 = df %>% select(bookname, isbn13)
View(rec_book1)
# 도서별 이용 분석
url = paste0("http://data4library.kr/api/usageAnalysisList?authKey=",API_KEY,"&isbn13=",ISBN_number)
doc = xmlParse(url)
doc = xmlParse(url)
top = xmlRoot(doc); top
df = xmlToDataFrame(getNodeSet(doc, "//recBooks/book"))
rec_boo2 = df %>% select(bookname, isbn13)
rec_book2 = df %>% select(bookname, isbn13)
View(rec_book2)
recbook[1]
rec_book[1]
rec_book[1,1] =
rec_book[1,1]
rec_book$isbn13[1]
rec_book1$isbn13[1]
rec_book1$isbn13[1,]
rec_book1$isbn13[1,1]
rec_book1$isbn13[1] == rec_book2$isbn13[1]
length(rec_book2)
nrow(rec_book2)
for (i in 1:nrow(rec_book2)) {
print(rec_book1$isbn13[i] == rec_book2$isbn13[i])
}
# 성북구 인기대출도서 데이터에서 ISBN number 가져오기
setwd("C:/Users/student/R_semi_project/2018년_성북구_ISBN기준_아동_인기대출도서")
data = read.csv("인기대출도서_2018-1.csv", skip=13, header=T, stringsAsFactors=F)
View(data)
data = data %>% select(서명, ISBN, 대출건수)
View(data)
data$ISBN[1]
data$ISBN[1] == ISBN_number
ISBN_number = data$ISBN[1]
url = paste0("http://data4library.kr/api/recommandList?authKey=",API_KEY,"&isbn13=",ISBN_number)
doc = xmlParse(url)
top = xmlRoot(doc); top
df = xmlToDataFrame(getNodeSet(doc, "//book")); df
rec_book1 = df %>% select(bookname, isbn13)
View(rec_book1)
