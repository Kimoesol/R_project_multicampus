x = sapply(count, function(x){x$getElementText()})
x
x = as.numeric(x)
x
shop = NULL
addr = NULL
phone = NULL
y1 = NULL
y2 = NULL
y3 = NULL
for(i in 1:x){
# 매장명
shopname = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,') > strong'))
y1 = sapply(shopname, function(x){x$getElementText()})
shop = c(shop,y1)
# 주소
addrname = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,')> p'))
y2 = sapply(addrname, function(x){x$getElementText()})
addr = c(addr,y2)
#전화번호
telephone = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,') > p > br'))
y3 = sapply(telephone, function(x){x$getElementText()})
phone = c(phone,y3)
if(i%%3==0){
remDr$executeScript(
"var su=arguments[0]; var dom=document.querySelectorAll(
'#mCSB_3_container > ul > li')[su]; dom.scrollIntoView();",list(i))
}
}
shop
addr
phone
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
str(addr)
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, '\n')
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, "\")
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr <- strsplit(addr, split='\n')
addr
addr
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, split='\n')
addr
ssdf
strsplit(addr, split='\n')
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, split='\')
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr <- gsub("[:cntrl:]","",addr)
addr
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr <- gsub("[\n]","",addr)
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr <- gsub("\n","",addr)
addr
addr
addr
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
strsplit(addr, '\n')
as.character(addr)
strsplit(addr, '\n')
strsplit(unlist(addr), '\n')
# strsplit() 함수 활용: 전화번호하고 주소 분리하기
addr_and_phone <- strsplit(unlist(addr), '\n')
addr <- addr_and_phone[1]
addr
phone <- addr_and_phone[,2]
phone <- addr_and_phone[,2,]
unlist(addr_and_phone)
addr_and_phone <- strsplit(unlist(addr), '\n')
unlist(addr_and_phone)
addr_and_phone
addr1 <- addr_and_phone(1:503,,)
addr1 <- addr_and_phone[1:503,,]
addr1 <- addr_and_phone[1,,1:503]
addr1 <- addr_and_phone[1,1:503]
addr1 <- addr_and_phone[1:503,1]
addr_and_phone$1
addr_and_phone$[1]
addr_and_phone$'1'
addr_and_phone[,1,1]
addr_and_phone[,1]
addr_and_phone[1,1]
addr_and_phone[1,1,1]
addr_and_phone[1,1,[1]
addr_and_phone[1,1,[1]]
addr_and_phone[[1]]
addr_and_phone[[1]][1]
addr_and_phone[[1:503]][1]
addr_and_phone[1:503][1]
addr_and_phone[[1]:[503]][1]
addr_and_phone[[503]][1]
addr_and_phone[[1:503]][1]
}
for(i in 1:503){
addr_and_phone[[i]][1]
}
addr1 <- for(i in 1:503){
addr_and_phone[[i]][1]
}
addr1 <- for(i in 1:503){
print(addr_and_phone[[i]][1])
}
return <- NULL
addr1 <- NULL
for(i in 1:503){
addr1 <- addr1 + unlist(addr_and_phone[[i]][1])
}
for(i in 1:503){
addr_and_phone <- unlist(addr_and_phone[[i]][1])
addr1 <- addr1 + addr_and_phone
for(i in 1:503){
addr_and_phone <- unlist(addr_and_phone[[i]][1])
addr1 <- addr1 + addr_and_phone
}
addr_and_phone <- unlist(addr_and_phone[[i]][1])
addr_and_phone
addr_and_phone
addr_and_phone[[1,2]][1]
addr_and_phone[[1]][1]
addr_and_phone[[1],[2]][1]
addr_and_phone[[1][2]][1]
addr_and_phone[1][2][1]
addr_and_phone[[1][2]][1]
addr_and_phone[[1]&[2]][1]
addr_and_phone[[1]&&[2]][1]
addr_and_phone[[1,2]][1]
addr_and_phone[1,2][1]
addr_and_phone
addr_and_phone <- strsplit(addr_and_phone,' ')
length(addr_and_phone)
names(addr_and_phone)
addr1 <- addr_and_phone[[1]][1]
addr1
class(addr1)
addr1 <- NULL
for(i in 1:503){
addr1 <- addr + addr_and_phone[[i]][1]
}
for(i in 1:503){
addr1 <- addr1 + addr_and_phone[[i]][1]
}
addr1 <- NULL
for(i in 1:503){
addr1 <- c(addr1, addr_and_phone[[i]][1])
}
addr1
addr_and_phone
addr1
addr <- addr1
addr
addr2 <- NULL
phone1 <- NULL
phone1 <- c(phone1, addr_and_phone[[i]][2])
for(i in 1:503){
phone1 <- c(phone1, addr_and_phone[[i]][2])
}
phone1
phone <- phone1
addr_and_phone
remDr$open()
remDr$navigate('https://www.istarbucks.co.kr/store/store_map.do?disp=locale')
# 서울지역
Seoul_Click = remDr$findElement(using = 'css', '#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step1 > div.loca_step1_cont > ul > li:nth-child(1) > a')
Seoul_Click$clickElement()
# 전체클릭
Whole_Click = remDr$findElement(using = 'css', '#mCSB_2_container > ul > li:nth-child(1) > a')
Whole_Click$clickElement()
Seoul_Click = remDr$findElement(using = 'css', '#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step1 > div.loca_step1_cont > ul > li:nth-child(1) > a')
Seoul_Click$clickElement()
Whole_Click = remDr$findElement(using = 'css', '#mCSB_2_container > ul > li:nth-child(1) > a')
Whole_Click$clickElement()
phone1
table(phone1)
sum(grepl('02-3015-1100', phone1))
sum(grepl('02) 3015-1100', phone1))
remDr$open()
remDr$navigate('https://www.istarbucks.co.kr/store/store_map.do?disp=locale')
Seoul_Click = remDr$findElement(using = 'css', '#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step1 > div.loca_step1_cont > ul > li:nth-child(1) > a')
Seoul_Click$clickElement()
Whole_Click = remDr$findElement(using = 'css', '#mCSB_2_container > ul > li:nth-child(1) > a')
Whole_Click$clickElement()
count = remDr$findElements('css selector','#container > div > form > fieldset > div > section > article.find_store_cont > article > article:nth-child(4) > div.loca_step3 > div.result_num_wrap > span')
x = sapply(count, function(x){x$getElementText()})
x = as.numeric(x)
x
shop = NULL
addr = NULL
phone = NULL
y1 = NULL
y2 = NULL
y3 = NULL
for(i in 1:x){
# 매장명
shopname = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,') > strong'))
y1 = sapply(shopname, function(x){x$getElementText()})
shop = c(shop,y1)
# 주소
addrname = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,')> p'))
y2 = sapply(addrname, function(x){x$getElementText()})
addr = c(addr,y2)
# 전화번호
telephone = remDr$findElements('css selector',paste('#mCSB_3_container > ul > li:nth-child(',i,') > p > br'))
y3 = sapply(telephone, function(x){x$getElementText()})
phone = c(phone,y3)
if(i%%3==0){
remDr$executeScript(
"var su=arguments[0]; var dom=document.querySelectorAll(
'#mCSB_3_container > ul > li')[su]; dom.scrollIntoView();",list(i))
}
}
addr_and_phone <- strsplit(unlist(addr), '\n')
ddr1 <- NULL
for(i in 1:503){
addr1 <- c(addr1, addr_and_phone[[i]][1])
}
addr <- addr1
phone1 <- NULL
for(i in 1:503){
phone1 <- c(phone1, addr_and_phone[[i]][2])
}
phone <- phone1
library(leaflet)
library(dplyr)
library(ggmap)
seoul_lonlat <- geocode("seoul")
install.packages("devtools")
devtools::install_github("cardiomoon/Kormaps")
devtools::install_github("cardiomoon/Kormaps")
library(devtools)
devtools::install_github("cardiomoon/Kormaps")
library(leaflet)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("cardiomoon/Kormaps")
library(Kormaps)
install.packages("leaflet")
library(leaflet)
library(dplyr)
library(ggmap)
devtools::install_github("cardiomoon/Kormaps")
data(cars)
head(cars)
m = lm(dist~speed, data=cars)
m
summary(m)
?lm
fitted(m)[1:4]
residuals(m)[1:4]
predict(m, newdata=data.frame(speed=3))
?fitted
m[1:4]
library(MASS)
data(Boston)
head(Boston)
install.packages("mlbench")
library(mlbench)
data("BostonHousing")
data(BostonHousing)
data("BostonHousing")
data(BostonHousing)
head(BostonHousing)
m2 = lm(medv~, data=BostonHousing)
m2 = lm(medv~. , data=BostonHousing)
m2
summary(m2)
cars$speed
m3 = step(m, direction = "both")
m3 = step(m2, direction = "both")
plot(result, hang=-1)
rm(list=ls())
library(ggplot2)
data(diamonds)
head(diamonds)
str(diamonds)
t = sample(1:nrow(diamonds), 1000)
t # 인덱스가 랜덤하게 뽑힘
test = diamonds[t,]
dim(test) # (1000,10)
test
mydia = test[c("price", "carat", "depth", "table")]
result = hclust(dist(mydia), method="ave") # 거리 값을 평균화
plot(result, hang=-1)
result2 = kmeans(mydia, 3) # 군집 수 = 3
result2
mydia
# 군집별 통계
g1 = subset(mydia, result2$cluster1==1)
summary(g1)
# 군집별 통계
g1 = subset(mydia, result2$cluster==1)
summary(g1)
g2 = subset(mydia, result2$cluster==2)
g3 = subset(mydia, result2$cluster==3)
summary(g2)
summary(g3)
str(mydia)
# 비계층적 모델
mydia$cluster = result2$cluster
head(mydia)
cor[mydia[,-5], method="pearson"]
cor(mydia[,-5], method="pearson")
plot(mydia[,-5])
plot(mydia$carat, mydia$price, col=mydia$cluster)
km.out.withness = c()
km.out.between = c()
for (i in 2:7) { # 군집수를 k=2~7까지 변화시켜가며 클러스터링 실행
set.weed(1)
km.out = kmeans(iris, centers=i)
km.out.withness[i-1] = km.out$tot.withinss # 군집 내 제곱합의 합
km.out.between[i-1] = km.out$betweenss # 군집 간 제곱합의 합
}
?set.weed
??set.weed
set.seed(1)
for (i in 2:7) { # 군집수를 k=2~7까지 변화시켜가며 클러스터링 실행
set.seed(1)
km.out = kmeans(iris, centers=i)
km.out.withness[i-1] = km.out$tot.withinss # 군집 내 제곱합의 합
km.out.between[i-1] = km.out$betweenss # 군집 간 제곱합의 합
}
iris = iris[,1:4] # 목표변수(Species) 제외
km.out.withness = c()
km.out.between = c()
for (i in 2:7) { # 군집수를 k=2~7까지 변화시켜가며 클러스터링 실행
set.seed(1)
km.out = kmeans(iris, centers=i)
km.out.withness[i-1] = km.out$tot.withinss # 군집 내 제곱합의 합
km.out.between[i-1] = km.out$betweenss # 군집 간 제곱합의 합
}
data.frame(km.out.withness, km.out.between)
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
data("Groceries")
data(Groceries)
Groceries
str(Groceries)
inspect(Groceries[1:10])
inspect(Groceries)
summary(Groceries)
sort(itemFrequency(Groceries, type="absolute"), decreasing=T)
itemFrequencyPlot(Groceries, topN=10, type="absolute")
itemFrequencyPlot(Groceries, topN=10, type="relative")
# 아프리오리 알고리즘
apriori(Groceries)
result_rules = apriori(Groceries,
parameter=list(support=0.005, confidence=0.5, minlen=2))
result_rules
summary(result_rules)
inspect(result_rules[1:10])
plot(result_rules, method="graph", control=list(type="items"))
setwd("C:/Rstudy/MLData")
build = read.csv("building.csv", header=T)
build[is.na(build)] = 0
build = build[-1]
build
build = read.csv("building.csv", header=T)
build[is.na(build)] = 0
build
build = build[-1]
build
# 연관성 분석
library(arules)
# 연관성 규칙 분석을 위해 transaction 타입으로 전환시켜야 함
trans = as.matrix(build, "Transaction")
rules1 = apriori(trans, parameter=list(supp=0.2, conf=0.6, target="rules"))
rules1
inspect(sort(rules1))
rules2 = subset(rules1, subset=lhs%pin%'보습학원' & confidence>0.7)
inspect(sort(rules2))
rules3 = subset(rules1, subset=rhs%pin%'편의점', confidence>0.7)
rules3
inspect(sort(rules3))
# visualization
b2 = t(as.matrix(build)) %*% as.matrix(build)
# install.packages("sna")
library(sna)
install.packages("sna")
library(sna)
library(rgl)
?rgl
??rgl
install.packages("rgl")
library(rgl)
b2.w = b2 - diag(diag(b2))
rownames(b2.w)
colnames(b2.w)
gplot(b2.w, displaylabel=T, vertex.cex=sqrt(diag(b2)), vertex.col="green",
edge.col="blue", boxed.labels=F, arrowhead.cex=.3, label.pops=3, edge.lwd=b2.w*2)
rm(list=ls())
setwd("C:/Users/student/R_semi_project")
library(dplyr)
library(XML)
api_key = "6cbf90cf628c9007879727b2f5d6aa59a8f8a6fe77d1700476714f7ef9440ea6"
options(scipen=99)
# 1. 자료수집 - '도서관/지역별 인기대출 도서 조회' API를 활용,
# 아리랑어린이도서관의 최근 3(~12)개월 인기 상위 10위 아동 도서들 목록 수집 (인기 아동도서들)
lib_code = 111468  # 아리랑어린이도서관 코드
start_d = '2019-09-01'
end_d = '2019-11-30'
fileUrl = paste0('http://data4library.kr/api/loanItemSrchByLib?authKey=', api_key,
'&libCode=', lib_code, '&startDt=', start_d,
'&endDt=', end_d, '&addCode=7&pageSize=10')
xml_doc = xmlTreeParse(fileUrl,useInternal=TRUE)
pop_books = trimws(xpathSApply( xmlRoot(xml_doc), "//bookname", xmlValue)); pop_books
pop_ISBN = trimws(xpathSApply( xmlRoot(xml_doc), "//isbn13", xmlValue)); pop_ISBN
pop_addNum = trimws(xpathSApply( xmlRoot(xml_doc), "//addition_symbol", xmlValue)); pop_addNum
pop_classNum = trimws(xpathSApply( xmlRoot(xml_doc), "//class_no", xmlValue)); pop_classNum
any(is.na(c(pop_books, pop_ISBN, pop_addNum, pop_classNum)))  # 정상이면 False
lib_df = read.csv('아리랑어린이도서관 장서 대출목록 (2019년 11월).csv',
stringsAsFactors=F )[c(2, 6, 8, 10, 11, 12)]
lib_df
lib_df = lib_df %>% filter(도서권수 != 0)  # 도서권수 0 인 도서(독본) 제외
lib_df = lib_df %>%
filter(!is.na(부가기호) & 부가기호==7) %>%
select(-부가기호)  # 아동도서(부가기호 7)만 추출
lib_df = lib_df %>%
filter(대출건수==0) %>%
select(-대출건수)  # 누적 대출건수 0만 추출
nrow(lib_df)
str(lib_df)
table(is.na(lib_df))
summary(lib_df)
table(is.na(lib_df))
table(lib_df$주제분류번호)
table(lib_df$주제분류번호)[table(lib_df$주제분류번호) > 20] %>% sort()
table(lib_df$도서권수)
lib_df[ lib_df$도서권수>=5 , ] %>% arrange(도서권수)  # 도서권수 이상치 확인
pop_books
# 3. 각 인기도서 별로, 비인기도서들 중 '주제분류번호' 같은 도서 목록 수집
# (인기도서 1권 + 관련 비인기 아동도서들 m권)
# - 10개 인기도서 별로 생성된 m+1개의 도서목록에 대해, 4~8 진행
matched_books_df = lib_df[ lib_df$주제분류번호 %in% pop_classNum, ]
nrow(matched_books_df)  # 999권
table(pop_classNum)
table(matched_books_df$주제분류번호)
pop = cbind(pop_books, pop_ISBN, pop_addNum, pop_classNum)
pop
matched_books_df
pop
nrow(matched_books_df$주제분류번호=833.6)
nrow(matched_books_df$주제분류번호==833.6)
table(matched_books_df$주제분류번호)
table(lib_df$주제분류번호)
table(lib_df$주제분류번호)[table(lib_df$주제분류번호) > 20] %>% sort()
pop
pop$pop_books
pop[1]
pop[,1]
pop[,4]
table(pop[,4])
table(matched_books_df$주제분류번호)
table(lib_df$주제분류번호)
table(pop[,4])
pop[,1][pop[,4]=="001"]
# 1. 자료수집 - '도서관/지역별 인기대출 도서 조회' API를 활용,
# 아리랑어린이도서관의 최근 3(~12)개월 인기 상위 10위 아동 도서들 목록 수집 (인기 아동도서들)
## API 호출해 응답받은 xml 문서 파싱해 저장(도서명, ISBN, ISBN부가기호, 주제분류)
lib_code = 111468  # 아리랑어린이도서관 코드
start_d = '2019-09-01'
end_d = '2019-11-30'
fileUrl = paste0('http://data4library.kr/api/loanItemSrchByLib?authKey=', api_key,
'&libCode=', lib_code, '&startDt=', start_d,
'&endDt=', end_d, '&addCode=7&pageSize=10')
xml_doc = xmlTreeParse(fileUrl,useInternal=TRUE)
xml_doc
pop_author = trimws(xpathSApply(xmlRoot(xml_doc), "//authors", xmlValue)); pop_author
pop_publisher = trimws(xpathSApply(xmlRoot(xml_doc), "//publisher", xmlValue)); pop_publisher
any(is.na(c(pop_books, pop_ISBN, pop_addNum, pop_classNum, pop_author, pop_publisher)))  # 정상이면 False
pop = cbind(pop_books, pop_ISBN, pop_addNum, pop_classNum, pop_author, pop_publisher)
lib_df = read.csv('아리랑어린이도서관 장서 대출목록 (2019년 11월).csv',
stringsAsFactors=F )
lib_df
View(lib_df)
lib_df = read.csv('아리랑어린이도서관 장서 대출목록 (2019년 11월).csv',
stringsAsFactors=F )[c(2, 3, 4, 6, 8, 10, 11, 12)]
lib_df = lib_df %>% filter(도서권수 != 0)  # 도서권수 0 인 도서(독본) 제외
lib_df = lib_df %>%
filter(!is.na(부가기호) & 부가기호==7) %>%
select(-부가기호)  # 아동도서(부가기호 7)만 추출
lib_df = lib_df %>%
filter(대출건수==0) %>%
select(-대출건수)  # 누적 대출건수 0만 추출
nrow(lib_df)
str(lib_df)
table(is.na(lib_df))
summary(lib_df)
table(is.na(lib_df))
table(lib_df$주제분류번호)
table(lib_df$주제분류번호)[table(lib_df$주제분류번호) > 20] %>% sort()
table(lib_df$도서권수)
lib_df[ lib_df$도서권수>=5 , ] %>% arrange(도서권수)  # 도서권수 이상치 확인
# 3. 각 인기도서 별로, 비인기도서들 중 '주제분류번호' 같은 도서 목록 수집
# (인기도서 1권 + 관련 비인기 아동도서들 m권)
# - 10개 인기도서 별로 생성된 m+1개의 도서목록에 대해, 4~8 진행
matched_books_df = lib_df[ lib_df$주제분류번호 %in% pop_classNum, ]
table(pop_classNum)
pop_author
lib_df$저자[nchar(lib_df$저자)<=5,]
lib_df$저자[nchar(lib_df$저자[1])<=5,]
nchar(lib_df$저자[1]
)
lib_df$저자[nchar(lib_df$저자)==5,]
lib_df$저자[nchar(lib_df$저자)<=5]
grep('김미경', '김산')
grepl('김미경', '김산')
grepl('김미경', c('김산', '글 김미경'))
grepl('김미경', c('김산', '글 김미경'), fixed=T)
